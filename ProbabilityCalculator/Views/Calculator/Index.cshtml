@model ProbabilityCalculator.Models.CalculatorViewModel

@{
    ViewBag.Title = "Calculate";
}

<h2>Index</h2>


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>CalculatorViewModel</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.AvailableCalculations, htmlAttributes: new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.SelectedCalculation, new SelectList(Model.AvailableCalculations, "Text", "Value"), "-- Select calculation --")
                @*                @Html.EditorFor(model => model.AvailableCalculations, new {htmlAttributes = new {@class = "form-control"}})*@
                @Html.ValidationMessageFor(model => model.SelectedCalculation, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.File, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.File, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.File, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Operator1, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Operator1, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Operator1, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Operator2, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Operator2, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Operator2, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Result, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Result, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Result, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Calculate" class="btn btn-default" />
            </div>
        </div>
    </div>
}

@*<div>*@
@*    @Html.ActionLink("Back to List", "Index")*@
@*</div>*@

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
